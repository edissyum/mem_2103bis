"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EwsUtilities_1 = require("../Core/EwsUtilities");
var ExtensionMethods_1 = require("../ExtensionMethods");
var XmlAttributeNames_1 = require("../Core/XmlAttributeNames");
var ComplexProperty_1 = require("./ComplexProperty");
/**
 * Represents the Id of an Exchange object.
 *
 * @abstract
 * @class ServiceId
 * @extends {ComplexProperty}
 */
var ServiceId = /** @class */ (function (_super) {
    __extends(ServiceId, _super);
    function ServiceId(uniqueId) {
        var _this = _super.call(this) || this;
        if (!ExtensionMethods_1.StringHelper.IsNullOrEmpty(uniqueId)) {
            EwsUtilities_1.EwsUtilities.ValidateParam(uniqueId, "uniqueId");
            _this.UniqueId = uniqueId;
        }
        return _this;
    }
    Object.defineProperty(ServiceId.prototype, "IsValid", {
        /**
         * True if this instance is valid, false otherthise.
         *
         * @value   *true* if this instance is valid; otherwise, *false*.
         */
        get: function () {
            return this.IsValidProxy();
        },
        enumerable: true,
        configurable: true
    });
    /** @internal IsValid proxy to be able to call super. from inherited child */
    ServiceId.prototype.IsValidProxy = function () {
        return !ExtensionMethods_1.StringHelper.IsNullOrEmpty(this.UniqueId);
    };
    /**
     * @internal Assigns from existing id.
     *
     * @param   {ServiceId}   source   The source.
     */
    ServiceId.prototype.Assign = function (source) {
        this.UniqueId = source.UniqueId;
        this.ChangeKey = source.ChangeKey;
    };
    /**
     * Determines whether the specified *ServiceId* is equal to the current *ServiceId*.
     * We do not consider the ChangeKey for ServiceId.Equals.
     *
     * @param   {any}       obj   The  to compare with the current .
     * @return  {boolean}   true if the specified  is equal to the current ; otherwise, false.
     */
    ServiceId.prototype.Equals = function (obj) {
        if (this === obj) { //object.ReferenceEquals(this, obj)) {
            return true;
        }
        else {
            var other = obj;
            if (!(other instanceof ServiceId)) { // == null) {
                return false;
            }
            else if (!(this.IsValid && other.IsValid)) {
                return false;
            }
            else {
                return this.UniqueId === other.UniqueId; //.Equals(other.UniqueId);
            }
        }
    };
    //GetHashCode(): number { return this.IsValid ? this.UniqueId.GetHashCode() : super.GetHashCode();}
    /**
     * @internal Gets the name of the XML element.
     *
     * @return  {string}      XML element name.
     */
    ServiceId.prototype.GetXmlElementName = function () { throw new Error("abstract method must implement."); };
    /**
     * @internal Loads service object from XML.
     *
     * @param   {any}				jsObject	Json Object converted from XML.
     * @param   {ExchangeService}	service	The service.
     */
    ServiceId.prototype.LoadFromXmlJsObject = function (jsObject, service) {
        for (var key in jsObject) {
            switch (key) {
                case XmlAttributeNames_1.XmlAttributeNames.Id:
                    this.UniqueId = jsObject[key];
                    break;
                case XmlAttributeNames_1.XmlAttributeNames.ChangeKey:
                    this.ChangeKey = jsObject[key];
                    break;
                default:
                    break;
            }
        }
    };
    /**
     * Determines whether two ServiceId instances are equal (including ChangeKeys)
     *
     * @param   {ServiceId}   other   The ServiceId to compare with the current ServiceId.
     */
    ServiceId.prototype.SameIdAndChangeKey = function (other) {
        if (this.Equals(other)) {
            return ((this.ChangeKey == null) && (other.ChangeKey == null)) ||
                this.ChangeKey === other.ChangeKey;
        }
        else {
            return false;
        }
    };
    /**
     * Returns a *String* that represents the current *ServiceId*.
     *
     * @return  {string}      A *String* that represents the current *ServiceId*.
     */
    ServiceId.prototype.ToString = function () {
        return (this.UniqueId == null) ? "" : this.UniqueId;
    };
    /**
     * @internal Writes attributes to XML.
     *
     * @param   {EwsServiceXmlWriter}   writer   The writer.
     */
    ServiceId.prototype.WriteAttributesToXml = function (writer) {
        writer.WriteAttributeValue(XmlAttributeNames_1.XmlAttributeNames.Id, this.UniqueId);
        writer.WriteAttributeValue(XmlAttributeNames_1.XmlAttributeNames.ChangeKey, this.ChangeKey);
    };
    /**
     * @internal Writes to XML.
     *
     * @param   {EwsServiceXmlWriter}   writer           The writer.
     * @param   {string}                xmlElementName   Name of the XML element.
     * @param   {XmlNamespace}          xmlNamespace     The XML namespace.
     */
    ServiceId.prototype.WriteToXml = function (writer, xmlElementName, xmlNamespace) {
        if (arguments.length > 2) {
            _super.prototype.WriteToXml.call(this, writer, xmlElementName, xmlNamespace);
        }
        else if (arguments.length > 1) {
            _super.prototype.WriteToXml.call(this, writer, xmlElementName);
        }
        else {
            _super.prototype.WriteToXml.call(this, writer, this.GetXmlElementName());
        }
    };
    return ServiceId;
}(ComplexProperty_1.ComplexProperty));
exports.ServiceId = ServiceId;
//# sourceMappingURL=ServiceId.js.map