"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var EwsLogging_1 = require("../Core/EwsLogging");
var ExtensionMethods_1 = require("../ExtensionMethods");
var TraceFlags_1 = require("../Enumerations/TraceFlags");
/**
 * @internal Class that reads AutoDiscover configuration information from DNS.
 */
var AutodiscoverDnsClient = /** @class */ (function () {
    /**
     * @internal Initializes a new instance of the **AutodiscoverDnsClient** class.
     *
     * @param   {AutodiscoverService}   service   The service.
     */
    function AutodiscoverDnsClient(service) {
        this.service = service;
    }
    //#region Instance methods
    /**
     * @internal Finds the Autodiscover host from DNS SRV records.
     *  @remarks    If the domain to lookup is "contoso.com", Autodiscover will use DnsQuery on SRV records for "_autodiscover._tcp.contoso.com". If the query is successful it will return a target domain (e.g. "mail.contoso.com") which will be tried as an Autodiscover endpoint.
     * @param   {string}   domain   The domain.
     * @return  {Promise<string>}   Autodiscover hostname (will be null if lookup failed).
     */
    AutodiscoverDnsClient.prototype.FindAutodiscoverHostFromSrv = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var domainToMatch, dnsSrvRecord;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        domainToMatch = AutodiscoverDnsClient.AutoDiscoverSrvPrefix + domain;
                        return [4 /*yield*/, this.FindBestMatchingSrvRecord(domainToMatch)];
                    case 1:
                        dnsSrvRecord = _a.sent();
                        if ((dnsSrvRecord == null) || ExtensionMethods_1.StringHelper.IsNullOrEmpty(dnsSrvRecord.name)) {
                            this.service.TraceMessage(TraceFlags_1.TraceFlags.AutodiscoverConfiguration, "No appropriate SRV record was found.");
                            return [2 /*return*/, null];
                        }
                        this.service.TraceMessage(TraceFlags_1.TraceFlags.AutodiscoverConfiguration, ExtensionMethods_1.StringHelper.Format("DNS query for SRV record for domain {0} found {1}", domain, dnsSrvRecord.name));
                        return [2 /*return*/, dnsSrvRecord.name];
                }
            });
        });
    };
    /**
     * Finds the best matching SRV record.
     *
     * @param   {string}   domain   The domain.
     * @return  {Promise<DnsSrvRecord>}      DnsSrvRecord(will be null if lookup failed).
     */
    AutodiscoverDnsClient.prototype.FindBestMatchingSrvRecord = function (domain) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var dnsSrvRecordList;
                        var dns = null;
                        try {
                            // try to get the dns client, only works on nodejs, not valid in browser\
                            dns = require("dns");
                        }
                        catch (error) {
                            resolve(null);
                            return;
                        }
                        if (!ExtensionMethods_1.StringHelper.IsNullOrEmpty(_this.service.DnsServerAddress)) {
                            var servers = dns.getServers();
                            dns.setServers(__spreadArrays([_this.service.DnsServerAddress], servers));
                        }
                        dns.resolveSrv(domain, function (dnsError, dnsSrvRecordList) {
                            if (dnsError) {
                                var dnsExcMessage = ExtensionMethods_1.StringHelper.Format("DnsQuery returned error error '{0}' error code '{1}'.", dnsError.message, dnsError.code || dnsError.errno);
                                resolve(null);
                                return;
                            }
                            _this.service.TraceMessage(TraceFlags_1.TraceFlags.AutodiscoverConfiguration, ExtensionMethods_1.StringHelper.Format("{0} SRV records were returned.", (dnsSrvRecordList || []).length));
                            if (!dnsSrvRecordList || dnsSrvRecordList.length === 0) {
                                resolve(null);
                                return;
                            }
                            // filter the addresses with ssl port
                            dnsSrvRecordList = dnsSrvRecordList.filter(function (a) { return a.port === AutodiscoverDnsClient.SslPort; });
                            // Records were returned but nothing matched our criteria.
                            if (dnsSrvRecordList.length === 0) {
                                _this.service.TraceMessage(TraceFlags_1.TraceFlags.AutodiscoverConfiguration, "No appropriate SRV records were found.");
                                resolve(null);
                                return;
                            }
                            // sort all records with the same (highest) priority and weight.
                            var bestDnsSrvRecordList = dnsSrvRecordList.sort(function (a, b) { return a.priority === b.priority ? b.weight - a.weight : a.priority - b.priority; });
                            // pick top one which has highest priority and highest weight value
                            var priority = bestDnsSrvRecordList[0].priority;
                            var weight = bestDnsSrvRecordList[0].weight;
                            // filter with highest priority and weight;
                            bestDnsSrvRecordList = bestDnsSrvRecordList.filter(function (a) { return a.priority === priority && a.weight === weight; });
                            // The list must contain at least one matching record since we found one earlier.
                            EwsLogging_1.EwsLogging.Assert(dnsSrvRecordList.length > 0, "AutodiscoverDnsClient.FindBestMatchingSrvRecord", "At least one DNS SRV record must match the criteria.");
                            // If we have multiple records with the same priority and weight, randomly pick one.
                            var recordIndex = bestDnsSrvRecordList.length > 1 ? Math.floor(Math.random() * Math.floor(bestDnsSrvRecordList.length)) : 0;
                            var bestDnsSrvRecord = bestDnsSrvRecordList[recordIndex];
                            var traceMessage = ExtensionMethods_1.StringHelper.Format("Returning SRV record {0} of {1} records. Target: {2}, Priority: {3}, Weight: {4}", recordIndex, dnsSrvRecordList.length, bestDnsSrvRecord.name, bestDnsSrvRecord.priority, bestDnsSrvRecord.weight);
                            _this.service.TraceMessage(TraceFlags_1.TraceFlags.AutodiscoverConfiguration, traceMessage);
                            resolve(bestDnsSrvRecord);
                        });
                    })];
            });
        });
    };
    //#region Constants
    /**
     * SRV DNS prefix to lookup.
     *
     * @static
     */
    AutodiscoverDnsClient.AutoDiscoverSrvPrefix = "_autodiscover._tcp.";
    /**
     * We are only interested in records that use SSL.
     *
     * @static
     */
    AutodiscoverDnsClient.SslPort = 443;
    return AutodiscoverDnsClient;
}());
exports.AutodiscoverDnsClient = AutodiscoverDnsClient;
//# sourceMappingURL=AutodiscoverDnsClient.js.map