"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XmlElementNames_1 = require("../Core/XmlElementNames");
/**
 * Represents the email Protocol connection settings for pop/imap/smtp protocols.
 * @sealed
 */
var ProtocolConnection = /** @class */ (function () {
    function ProtocolConnection(encryptionMethod, hostname, port) {
        if (encryptionMethod === void 0) { encryptionMethod = null; }
        if (hostname === void 0) { hostname = null; }
        if (port === void 0) { port = 0; }
        this.encryptionMethod = encryptionMethod;
        this.hostname = hostname;
        this.port = port;
    }
    Object.defineProperty(ProtocolConnection.prototype, "EncryptionMethod", {
        /**
         * Gets or sets the encryption method.
         */
        get: function () {
            return this.encryptionMethod;
        },
        set: function (value) {
            this.encryptionMethod = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProtocolConnection.prototype, "Hostname", {
        /**
         * Gets or sets the Hostname.
         */
        get: function () {
            return this.hostname;
        },
        set: function (value) {
            this.hostname = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProtocolConnection.prototype, "Port", {
        /**
         * Gets or sets the port number.
         */
        get: function () {
            return this.port;
        },
        set: function (value) {
            this.port = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @internal Read user setting with ProtocolConnectionCollection value.
     *
     * @param   {any} jsObject  Json Object converted from XML.
     */
    ProtocolConnection.LoadFromXmlJsObject = function (jsObject) {
        var connection = new ProtocolConnection();
        connection.encryptionMethod = jsObject[XmlElementNames_1.XmlElementNames.EncryptionMethod] || null;
        connection.hostname = jsObject[XmlElementNames_1.XmlElementNames.Hostname] || null;
        connection.port = parseInt(jsObject[XmlElementNames_1.XmlElementNames.Port]) || 0;
        return connection;
    };
    return ProtocolConnection;
}());
exports.ProtocolConnection = ProtocolConnection;
//# sourceMappingURL=ProtocolConnection.js.map