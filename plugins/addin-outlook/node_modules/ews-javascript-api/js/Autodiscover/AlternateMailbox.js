"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var XmlElementNames_1 = require("../Core/XmlElementNames");
/**
 * Represents an alternate mailbox.
 * @sealed
 */
var AlternateMailbox = /** @class */ (function () {
    /**
     * Initializes a new instance of the **AlternateMailbox** class.
     */
    function AlternateMailbox() {
    }
    Object.defineProperty(AlternateMailbox.prototype, "Type", {
        /**
         * Gets the alternate mailbox type.
         */
        get: function () {
            return this.type;
        },
        /** @internal set */
        set: function (value) {
            this.type = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlternateMailbox.prototype, "DisplayName", {
        /**
         * Gets the alternate mailbox display name.
         */
        get: function () {
            return this.displayName;
        },
        /** @internal set */
        set: function (value) {
            this.displayName = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlternateMailbox.prototype, "LegacyDN", {
        /**
         * Gets the alternate mailbox legacy DN.
         */
        get: function () {
            return this.legacyDN;
        },
        /** @internal set */
        set: function (value) {
            this.legacyDN = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlternateMailbox.prototype, "Server", {
        /**
         * Gets the alernate mailbox server.
         */
        get: function () {
            return this.server;
        },
        /** @internal set */
        set: function (value) {
            this.server = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlternateMailbox.prototype, "SmtpAddress", {
        /**
         * Gets the alternate mailbox address.
         * It has value only when Server and LegacyDN is empty.
         */
        get: function () {
            return this.smtpAddress;
        },
        /** @internal set */
        set: function (value) {
            this.smtpAddress = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AlternateMailbox.prototype, "OwnerSmtpAddress", {
        /**
         * Gets the alternate mailbox owner SmtpAddress.
         */
        get: function () {
            return this.ownerSmtpAddress;
        },
        /** @internal set */
        set: function (value) {
            this.ownerSmtpAddress = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @internal Loads AlternateMailbox instance.
     *
     * @param   {any} jsObject  Json Object converted from XML.
     * @returns {AlternateMailbox}  AlternateMailbox.
     */
    AlternateMailbox.LoadFromXmlJsObject = function (jsObject) {
        var altMailbox = new AlternateMailbox();
        altMailbox.Type = jsObject[XmlElementNames_1.XmlElementNames.Type] || null;
        altMailbox.DisplayName = jsObject[XmlElementNames_1.XmlElementNames.DisplayName] || null;
        altMailbox.LegacyDN = jsObject[XmlElementNames_1.XmlElementNames.DisplayName] || null;
        altMailbox.Server = jsObject[XmlElementNames_1.XmlElementNames.DisplayName] || null;
        altMailbox.SmtpAddress = jsObject[XmlElementNames_1.XmlElementNames.DisplayName] || null;
        altMailbox.OwnerSmtpAddress = jsObject[XmlElementNames_1.XmlElementNames.DisplayName] || null;
        return altMailbox;
    };
    return AlternateMailbox;
}());
exports.AlternateMailbox = AlternateMailbox;
//# sourceMappingURL=AlternateMailbox.js.map