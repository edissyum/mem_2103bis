"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AltDictionary_1 = require("../../AltDictionary");
var DomainSettingError_1 = require("../DomainSettingError");
var DomainSettingName_1 = require("../../Enumerations/DomainSettingName");
var EwsLogging_1 = require("../../Core/EwsLogging");
var ExtensionMethods_1 = require("../../ExtensionMethods");
var XmlElementNames_1 = require("../../Core/XmlElementNames");
var AutodiscoverResponse_1 = require("./AutodiscoverResponse");
/**
 * Represents the response to a GetDomainSettings call for an individual domain.
 * @sealed
 */
var GetDomainSettingsResponse = /** @class */ (function (_super) {
    __extends(GetDomainSettingsResponse, _super);
    /**
     * Initializes a new instance of the **GetDomainSettingsResponse** class.
     */
    function GetDomainSettingsResponse() {
        var _this = _super.call(this) || this;
        _this.domain = null;
        _this.redirectTarget = null;
        _this.settings = null;
        _this.domainSettingErrors = null;
        _this.domain = ExtensionMethods_1.StringHelper.Empty;
        _this.settings = new AltDictionary_1.Dictionary(function (value) { return value.toString(); });
        _this.domainSettingErrors = [];
        return _this;
    }
    Object.defineProperty(GetDomainSettingsResponse.prototype, "Domain", {
        /**
         * Gets the domain this response applies to.
         */
        get: function () {
            return this.domain;
        },
        /** @internal */
        set: function (value) {
            this.domain = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GetDomainSettingsResponse.prototype, "RedirectTarget", {
        /**
         * Gets the redirectionTarget (URL or email address)
         */
        get: function () {
            return this.redirectTarget;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GetDomainSettingsResponse.prototype, "Settings", {
        /**
         * Gets the requested settings for the domain.
         */
        get: function () {
            return this.settings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GetDomainSettingsResponse.prototype, "DomainSettingErrors", {
        /**
         * Gets error information for settings that could not be returned.
         */
        get: function () {
            return this.domainSettingErrors;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Loads the domain setting errors.
     *
     * @param   {any} jsObject  Json Object converted from XML.
     */
    GetDomainSettingsResponse.prototype.LoadDomainSettingErrorsFromXmlJsObject = function (jsObject) {
        var errors = undefined;
        if (ExtensionMethods_1.isNullOrUndefined(jsObject) || ExtensionMethods_1.isNullOrUndefined(jsObject[XmlElementNames_1.XmlElementNames.DomainSettingError]))
            return;
        if (Array.isArray(jsObject[XmlElementNames_1.XmlElementNames.DomainSettingError]))
            errors = jsObject[XmlElementNames_1.XmlElementNames.DomainSettingError];
        else
            errors = [jsObject[XmlElementNames_1.XmlElementNames.DomainSettingError]];
        for (var i = 0; i < errors.length; i++) {
            var error = new DomainSettingError_1.DomainSettingError();
            error.LoadFromXmlJsObject(errors[i]);
            this.DomainSettingErrors.push(error);
        }
    };
    /**
     * @internal Loads setting from XML jsObject.
     *
     * @param   {any} jsObject  Json Object converted from XML.
     */
    GetDomainSettingsResponse.prototype.LoadDomainSettingsFromXmlJsObject = function (obj) {
        var settings = undefined;
        if (typeof (obj[XmlElementNames_1.XmlElementNames.DomainSetting]) === 'undefined')
            return;
        if (Object.prototype.toString.call(obj[XmlElementNames_1.XmlElementNames.DomainSetting]) === "[object Array]")
            settings = obj[XmlElementNames_1.XmlElementNames.DomainSetting];
        else
            settings = [obj[XmlElementNames_1.XmlElementNames.DomainSetting]];
        for (var i = 0; i < settings.length; i++) {
            var setting = settings[i];
            var settingClass = setting["type"];
            switch (settingClass) {
                case XmlElementNames_1.XmlElementNames.DomainStringSetting:
                    this.ReadSettingFromXmlJsObject(setting);
                    break;
                default:
                    EwsLogging_1.EwsLogging.Assert(false, "GetUserSettingsResponse.LoadUserSettingsFromXml", ExtensionMethods_1.StringHelper.Format("Invalid setting class '{0}' returned", settingClass));
                    break;
            }
        }
    };
    /**
     * @internal Load from XML jsObject.
     *
     * @param   {any} jsObject  Json Object converted from XML.
     */
    GetDomainSettingsResponse.prototype.LoadFromXmlJsObject = function (jsObject) {
        _super.prototype.LoadFromXmlJsObject.call(this, jsObject);
        var settingscol = jsObject[XmlElementNames_1.XmlElementNames.DomainSettings];
        this.LoadDomainSettingsFromXmlJsObject(settingscol);
        this.redirectTarget = jsObject[XmlElementNames_1.XmlElementNames.RedirectTarget] || null;
        this.LoadDomainSettingErrorsFromXmlJsObject(jsObject[XmlElementNames_1.XmlElementNames.DomainSettingErrors]);
    };
    /**
     * Reads domain setting from XML jsObject.
     *
     * @param   {any} jsObject  Json Object converted from XML.
     */
    GetDomainSettingsResponse.prototype.ReadSettingFromXmlJsObject = function (obj) {
        var name = obj[XmlElementNames_1.XmlElementNames.Name];
        var value = obj[XmlElementNames_1.XmlElementNames.Value];
        // EWS Managed API is broken with AutoDSvc endpoint in RedirectUrl scenario
        var domainSettingName = DomainSettingName_1.DomainSettingName[name]; // EwsUtilities.Parse<UserSettingName>(name);
        if (domainSettingName !== undefined)
            this.Settings.Add(domainSettingName, value);
        else
            EwsLogging_1.EwsLogging.Assert(false, "GetUserSettingsResponse.ReadSettingFromObject", "Unexpected or empty name element in user setting");
    };
    return GetDomainSettingsResponse;
}(AutodiscoverResponse_1.AutodiscoverResponse));
exports.GetDomainSettingsResponse = GetDomainSettingsResponse;
//# sourceMappingURL=GetDomainSettingsResponse.js.map